# -*- coding: utf-8 -*-
"""3B.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HRZIipH0FZTfDeGITYNtP7qm_cfhN30f

2702406644_Muhammad Abel Al Rasyid
"""

import pandas as pd
import numpy as np
import pickle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, RobustScaler
from sklearn.metrics import classification_report, accuracy_score
from xgboost import XGBClassifier

class DataHandler:
    def __init__(self, file_path):
        self.file_path = file_path
        self.df = None
        self.x_train = None
        self.x_test = None
        self.y_train = None
        self.y_test = None
        self.cat_cols = ['type_of_meal_plan', 'room_type_reserved', 'market_segment_type']
        self.standard_cols = ['arrival_month', 'arrival_date']
        self.robust_cols = ['no_of_adults', 'no_of_children', 'no_of_weekend_nights',
                            'no_of_week_nights', 'required_car_parking_space', 'lead_time',
                            'arrival_year', 'repeated_guest', 'no_of_previous_cancellations',
                            'no_of_previous_bookings_not_canceled', 'avg_price_per_room',
                            'no_of_special_requests']

    def load_data(self):
        self.df = pd.read_csv(self.file_path)
        self.df.drop(columns=['Booking_ID'], inplace=True)
        self.df['booking_status'] = self.df['booking_status'].map({'Not_Canceled': 0, 'Canceled': 1})

    def preprocess(self):
        x = self.df.drop(columns=['booking_status'])
        y = self.df['booking_status']
        x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

        x_train = pd.get_dummies(x_train, columns=self.cat_cols, drop_first=True)
        x_test = pd.get_dummies(x_test, columns=self.cat_cols, drop_first=True)
        x_test = x_test.reindex(columns=x_train.columns, fill_value=0)

        self.standard_scaler = StandardScaler()
        self.robust_scaler = RobustScaler()

        x_train[self.standard_cols] = self.standard_scaler.fit_transform(x_train[self.standard_cols])
        x_test[self.standard_cols] = self.standard_scaler.transform(x_test[self.standard_cols])
        x_train[self.robust_cols] = self.robust_scaler.fit_transform(x_train[self.robust_cols])
        x_test[self.robust_cols] = self.robust_scaler.transform(x_test[self.robust_cols])

        self.x_train, self.x_test, self.y_train, self.y_test = x_train, x_test, y_train, y_test

class XGBoostModel:
    def __init__(self, x_train, y_train, x_test, y_test):
        self.x_train = x_train
        self.y_train = y_train
        self.x_test = x_test
        self.y_test = y_test
        self.model = XGBClassifier(n_estimators=100, random_state=42)

    def train(self):
        self.model.fit(self.x_train, self.y_train)

    def evaluate(self):
        y_pred = self.model.predict(self.x_test)
        print("\n--- Classification Report ---")
        print(classification_report(self.y_test, y_pred))
        acc = accuracy_score(self.y_test, y_pred) * 100
        print(f"Accuracy: {acc:.2f}%")

    def save_model(self, path):
        with open(path, "wb") as f:
            pickle.dump(self.model, f)

# Eksekusi
handler = DataHandler("Dataset_B_hotel.csv")
handler.load_data()
handler.preprocess()

model = XGBoostModel(handler.x_train, handler.y_train, handler.x_test, handler.y_test)
model.train()
model.evaluate()

# Simpan model dan scaler
model.save_model("best_xgb_model.pkl")

with open("standard_scaler.pkl", "wb") as f:
    pickle.dump(handler.standard_scaler, f)

with open("robust_scaler.pkl", "wb") as f:
    pickle.dump(handler.robust_scaler, f)

with open("columns.pkl", "wb") as f:
    pickle.dump(handler.x_train.columns.tolist(), f)

"""Code ini adalah class OOP yang bernama BookingPredictor untuk memprediksi dari model machine learning yaitu XGBoost pada data yang baru.

"""

